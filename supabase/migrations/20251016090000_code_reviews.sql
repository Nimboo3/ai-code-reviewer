-- Creates the table if missing, enables RLS, adds owner-only policy, and grants needed privileges.
-- Safe to run even if you partially executed earlier in the SQL editor.

-- 1) Table
create table if not exists public.code_reviews (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  owner uuid not null references auth.users(id) on update cascade on delete cascade,
  file_name text not null,
  language text,
  source_preview text,
  report_md text,
  status text not null default 'completed',
  model text,
  tokens integer
);

-- 2) RLS
alter table public.code_reviews enable row level security;

-- 3) Owner-only policy (no “authenticative” schema; use auth.uid())
do $$
begin
  if not exists (
    select 1
    from pg_policies
    where schemaname = 'public'
      and tablename = 'code_reviews'
      and policyname = 'Only owner can access'
  ) then
    execute $pol$
      create policy "Only owner can access"
      on public.code_reviews
      for all
      to authenticated
      using (owner = auth.uid())
      with check (owner = auth.uid());
    $pol$;
  end if;
end
$$;

-- 4) Grants (no anon write; service_role bypasses RLS by design)
grant select, insert, update, delete on table public.code_reviews to authenticated, service_role;

-- 5) Sequence grants for identity column (needed for inserts)
do $$
begin
  if to_regclass('public.code_reviews_id_seq') is not null then
    execute 'grant usage, select on sequence public.code_reviews_id_seq to authenticated, service_role';
  end if;
end
$$;
